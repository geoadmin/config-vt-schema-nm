name: SwissTopo CI - import sql

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - PROD
    paths:
      - 'layers/**.yaml'
      - 'layers/**.sql'
      - 'ch.swisstopo.orthophoto-overlay.vt.yaml'

jobs:
  import_sql:
    name: Import sql into db
    runs-on: push-workflow
    env:
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      MT_SERVER_PSWD: ${{ secrets.MT_SERVER_PSWD}}
      METADATA_LOCAL_FILE: "metadata.mbtiles"
    steps:
      - name: Get code
        uses: actions/checkout@v2
        with:
          # Fetch the last two commits in case this is a PR,
          # and we need to profile the base branch first
          fetch-depth: 2
          path: code

      - name: Import sql
        run: |
          cd code
          make clean
          make build
          make import-sql
          make grant-vt_reader

      - name: Generate metadata and create contents table
        run: |
          cd code
          echo "Create metadata.mbtiles"
          sqlite3 ${METADATA_LOCAL_FILE}
          sqlite3 ${METADATA_LOCAL_FILE} "CREATE TABLE metadata(name text, value text); "
          make generate-metadata
          export MD_NAME="'$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='name'")'"
          export MD_GETTILE="'getmvt'"
          export BOUNDS="$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='bounds'")"
          export MIN_LONG=$(cut -d',' -f1 <<< ${BOUNDS})
          export MIN_LAT=$(cut -d',' -f2 <<< ${BOUNDS})
          export MAX_LONG=$(cut -d',' -f3 <<< ${BOUNDS})
          export MAX_LAT=$(cut -d',' -f4 <<< ${BOUNDS})
          export MD_EXTENT="'BOX(${MIN_LONG} ${MIN_LAT},${MAX_LONG} ${MAX_LAT})'"
          export CENTER=$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='center'")
          export CENTER_LONG=$(cut -d',' -f1 <<< ${CENTER})
          export CENTER_LAT=$(cut -d',' -f2 <<< ${CENTER})
          export MD_ZOOM=$(cut -d',' -f3 <<< ${CENTER})
          export MD_CENTER="'{${CENTER_LONG},${CENTER_LAT}}'"
          export MD_MIN_ZOOM=$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='minzoom'")
          export MD_MAX_ZOOM=$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='maxzoom'")
          export MD_ATTRIBUTION="'$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='attribution'")'"
          export MD_DESCRIPTION="'$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='description'")'"
          export VECTOR_LAYERS="$(sqlite3 ${METADATA_LOCAL_FILE} "SELECT value FROM metadata WHERE name='json'")"
          bash prepare_import/prepare_vector_layers.sh "${VECTOR_LAYERS}" > vector_layers
          export MD_LAYERS="'$(cat vector_layers)'"
          make create-contents

  generate_docs:
    name: Generate docs
    runs-on: push-workflow
    env:
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Remove old directories
        run: |
          sudo rm -rf master ghpages

      - name: Fetch master branch
        uses: actions/checkout@v2
        with:
          # Fetch the last two commits in case this is a PR,
          # and we need to profile the base branch first
          fetch-depth: 2
          ref: master
          path: master

      - name: Fetch ghpages branch
        uses: actions/checkout@v2
        with:
          ref: ghpages
          path: ghpages

      - name: Build the site with Jekyll
        run: |
          cd master
          bash ${{ github.workspace }}/ghpages/generate-jekyll-layer-docs.sh

      - name: Move generated files to ghpages branch
        run: |
          cp ${{ github.workspace }}/master/docs/* ${{ github.workspace }}/ghpages/layers/
          cp ${{ github.workspace }}/master/media/* ${{ github.workspace }}/ghpages/media/

      - name: Add time-stamp to READ.me
        run: |
          cd ${{ github.workspace }}/ghpages
          sed -i "s/Last updated:.*/Last updated: `date "+%Y%m%d-%H%M%S"`/g" README.md

      - name: Commit changes to ghpages branch
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          cd ${{ github.workspace }}/ghpages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m 'Docs auto-generated'
          git push origin ghpages